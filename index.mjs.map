{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nimport Slice from '@stdlib/slice-ctor';\nimport ndims from '@stdlib/ndarray-base-ndims';\nimport slice from '@stdlib/ndarray-base-slice';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport filled from '@stdlib/array-base-filled';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a truncated view of an input ndarray along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {integer} stop - ending index (exclusive)\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceDimensionTo( x, 0, 2, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceDimensionTo( x, dim, stop, strict, writable ) {\n\tvar args;\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Define a list of slice arguments:\n\targs = filled( null, N );\n\targs[ d ] = new Slice( stop );\n\n\t// Return a new array view:\n\treturn slice( x, args2multislice( args ), strict, writable );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimensionTo;\n"],"names":["sliceDimensionTo","x","dim","stop","strict","writable","args","N","d","ndims","TypeError","format","normalizeIndex","RangeError","filled","Slice","slice","args2multislice"],"mappings":";;wpBAyEA,SAASA,EAAkBC,EAAGC,EAAKC,EAAMC,EAAQC,GAChD,IAAIC,EACAC,EACAC,EAMJ,GAAW,KAHXD,EAAIE,EAAOR,IAIV,MAAM,IAAIS,UAAWC,EAAQ,+GAAgHJ,IAI9I,IAAY,KADZC,EAAII,EAAgBV,EAAKK,EAAE,IAE1B,MAAM,IAAIM,WAAYF,EAAQ,6GAA8GJ,EAAGL,IAOhJ,OAJAI,EAAOQ,EAAQ,KAAMP,IACfC,GAAM,IAAIO,EAAOZ,GAGhBa,EAAOf,EAAGgB,EAAiBX,GAAQF,EAAQC,EACnD"}